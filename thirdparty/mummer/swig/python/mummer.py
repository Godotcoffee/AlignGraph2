# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Mummer binding"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mummer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mummer')
    _mummer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mummer', [dirname(__file__)])
        except ImportError:
            import _mummer
            return _mummer
        try:
            _mod = imp.load_module('_mummer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mummer = swig_import_helper()
    del swig_import_helper
else:
    import _mummer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mummer.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mummer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mummer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mummer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mummer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mummer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mummer.SwigPyIterator_copy(self)

    def next(self):
        return _mummer.SwigPyIterator_next(self)

    def __next__(self):
        return _mummer.SwigPyIterator___next__(self)

    def previous(self):
        return _mummer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mummer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mummer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mummer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mummer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mummer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mummer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mummer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mummer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mummer.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mummer.LongVector___nonzero__(self)

    def __bool__(self):
        return _mummer.LongVector___bool__(self)

    def __len__(self):
        return _mummer.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _mummer.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mummer.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mummer.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mummer.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mummer.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mummer.LongVector___setitem__(self, *args)

    def pop(self):
        return _mummer.LongVector_pop(self)

    def append(self, x):
        return _mummer.LongVector_append(self, x)

    def empty(self):
        return _mummer.LongVector_empty(self)

    def size(self):
        return _mummer.LongVector_size(self)

    def swap(self, v):
        return _mummer.LongVector_swap(self, v)

    def begin(self):
        return _mummer.LongVector_begin(self)

    def end(self):
        return _mummer.LongVector_end(self)

    def rbegin(self):
        return _mummer.LongVector_rbegin(self)

    def rend(self):
        return _mummer.LongVector_rend(self)

    def clear(self):
        return _mummer.LongVector_clear(self)

    def get_allocator(self):
        return _mummer.LongVector_get_allocator(self)

    def pop_back(self):
        return _mummer.LongVector_pop_back(self)

    def erase(self, *args):
        return _mummer.LongVector_erase(self, *args)

    def __init__(self, *args):
        this = _mummer.new_LongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mummer.LongVector_push_back(self, x)

    def front(self):
        return _mummer.LongVector_front(self)

    def back(self):
        return _mummer.LongVector_back(self)

    def assign(self, n, x):
        return _mummer.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _mummer.LongVector_resize(self, *args)

    def insert(self, *args):
        return _mummer.LongVector_insert(self, *args)

    def reserve(self, n):
        return _mummer.LongVector_reserve(self, n)

    def capacity(self):
        return _mummer.LongVector_capacity(self)
    __swig_destroy__ = _mummer.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _mummer.LongVector_swigregister
LongVector_swigregister(LongVector)


def set_num_threads(nb):
    return _mummer.set_num_threads(nb)
set_num_threads = _mummer.set_num_threads

def get_num_threads():
    return _mummer.get_num_threads()
get_num_threads = _mummer.get_num_threads
class Alignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Alignment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dirB"] = _mummer.Alignment_dirB_set
    __swig_getmethods__["dirB"] = _mummer.Alignment_dirB_get
    if _newclass:
        dirB = _swig_property(_mummer.Alignment_dirB_get, _mummer.Alignment_dirB_set)
    __swig_setmethods__["sA"] = _mummer.Alignment_sA_set
    __swig_getmethods__["sA"] = _mummer.Alignment_sA_get
    if _newclass:
        sA = _swig_property(_mummer.Alignment_sA_get, _mummer.Alignment_sA_set)
    __swig_setmethods__["sB"] = _mummer.Alignment_sB_set
    __swig_getmethods__["sB"] = _mummer.Alignment_sB_get
    if _newclass:
        sB = _swig_property(_mummer.Alignment_sB_get, _mummer.Alignment_sB_set)
    __swig_setmethods__["eA"] = _mummer.Alignment_eA_set
    __swig_getmethods__["eA"] = _mummer.Alignment_eA_get
    if _newclass:
        eA = _swig_property(_mummer.Alignment_eA_get, _mummer.Alignment_eA_set)
    __swig_setmethods__["eB"] = _mummer.Alignment_eB_set
    __swig_getmethods__["eB"] = _mummer.Alignment_eB_get
    if _newclass:
        eB = _swig_property(_mummer.Alignment_eB_get, _mummer.Alignment_eB_set)
    __swig_setmethods__["delta"] = _mummer.Alignment_delta_set
    __swig_getmethods__["delta"] = _mummer.Alignment_delta_get
    if _newclass:
        delta = _swig_property(_mummer.Alignment_delta_get, _mummer.Alignment_delta_set)
    __swig_setmethods__["deltaApos"] = _mummer.Alignment_deltaApos_set
    __swig_getmethods__["deltaApos"] = _mummer.Alignment_deltaApos_get
    if _newclass:
        deltaApos = _swig_property(_mummer.Alignment_deltaApos_get, _mummer.Alignment_deltaApos_set)
    __swig_setmethods__["Errors"] = _mummer.Alignment_Errors_set
    __swig_getmethods__["Errors"] = _mummer.Alignment_Errors_get
    if _newclass:
        Errors = _swig_property(_mummer.Alignment_Errors_get, _mummer.Alignment_Errors_set)
    __swig_setmethods__["SimErrors"] = _mummer.Alignment_SimErrors_set
    __swig_getmethods__["SimErrors"] = _mummer.Alignment_SimErrors_get
    if _newclass:
        SimErrors = _swig_property(_mummer.Alignment_SimErrors_get, _mummer.Alignment_SimErrors_set)
    __swig_setmethods__["NonAlphas"] = _mummer.Alignment_NonAlphas_set
    __swig_getmethods__["NonAlphas"] = _mummer.Alignment_NonAlphas_get
    if _newclass:
        NonAlphas = _swig_property(_mummer.Alignment_NonAlphas_get, _mummer.Alignment_NonAlphas_set)

    def identity(self):
        return _mummer.Alignment_identity(self)

    def similarity(self):
        return _mummer.Alignment_similarity(self)

    def stopity(self):
        return _mummer.Alignment_stopity(self)

    def __str__(self):
        """Return string representation of alignment"""
        return _mummer.Alignment___str__(self)


    def __init__(self):
        """Return string representation of alignment"""
        this = _mummer.new_Alignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mummer.delete_Alignment
    __del__ = lambda self: None
Alignment_swigregister = _mummer.Alignment_swigregister
Alignment_swigregister(Alignment)

class AlignmentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlignmentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlignmentVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mummer.AlignmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mummer.AlignmentVector___nonzero__(self)

    def __bool__(self):
        return _mummer.AlignmentVector___bool__(self)

    def __len__(self):
        return _mummer.AlignmentVector___len__(self)

    def __getslice__(self, i, j):
        return _mummer.AlignmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mummer.AlignmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mummer.AlignmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mummer.AlignmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mummer.AlignmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mummer.AlignmentVector___setitem__(self, *args)

    def pop(self):
        return _mummer.AlignmentVector_pop(self)

    def append(self, x):
        return _mummer.AlignmentVector_append(self, x)

    def empty(self):
        return _mummer.AlignmentVector_empty(self)

    def size(self):
        return _mummer.AlignmentVector_size(self)

    def swap(self, v):
        return _mummer.AlignmentVector_swap(self, v)

    def begin(self):
        return _mummer.AlignmentVector_begin(self)

    def end(self):
        return _mummer.AlignmentVector_end(self)

    def rbegin(self):
        return _mummer.AlignmentVector_rbegin(self)

    def rend(self):
        return _mummer.AlignmentVector_rend(self)

    def clear(self):
        return _mummer.AlignmentVector_clear(self)

    def get_allocator(self):
        return _mummer.AlignmentVector_get_allocator(self)

    def pop_back(self):
        return _mummer.AlignmentVector_pop_back(self)

    def erase(self, *args):
        return _mummer.AlignmentVector_erase(self, *args)

    def __init__(self, *args):
        this = _mummer.new_AlignmentVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mummer.AlignmentVector_push_back(self, x)

    def front(self):
        return _mummer.AlignmentVector_front(self)

    def back(self):
        return _mummer.AlignmentVector_back(self)

    def assign(self, n, x):
        return _mummer.AlignmentVector_assign(self, n, x)

    def resize(self, *args):
        return _mummer.AlignmentVector_resize(self, *args)

    def insert(self, *args):
        return _mummer.AlignmentVector_insert(self, *args)

    def reserve(self, n):
        return _mummer.AlignmentVector_reserve(self, n)

    def capacity(self):
        return _mummer.AlignmentVector_capacity(self)
    __swig_destroy__ = _mummer.delete_AlignmentVector
    __del__ = lambda self: None
AlignmentVector_swigregister = _mummer.AlignmentVector_swigregister
AlignmentVector_swigregister(AlignmentVector)

class Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr

    def mum(self):
        return _mummer.Options_mum(self)

    def mumcand(self):
        return _mummer.Options_mumcand(self)

    def mumreference(self):
        return _mummer.Options_mumreference(self)

    def maxmatch(self):
        return _mummer.Options_maxmatch(self)

    def breaklen(self, l):
        return _mummer.Options_breaklen(self, l)

    def banded(self):
        return _mummer.Options_banded(self)

    def nobanded(self):
        return _mummer.Options_nobanded(self)

    def mincluster(self, m):
        return _mummer.Options_mincluster(self, m)

    def diagdiff(self, d):
        return _mummer.Options_diagdiff(self, d)

    def diagfactor(self, f):
        return _mummer.Options_diagfactor(self, f)

    def extend(self):
        return _mummer.Options_extend(self)

    def noextend(self):
        return _mummer.Options_noextend(self)

    def forward(self):
        return _mummer.Options_forward(self)

    def maxgap(self, m):
        return _mummer.Options_maxgap(self, m)

    def minmatch(self, m):
        return _mummer.Options_minmatch(self, m)

    def optimize(self):
        return _mummer.Options_optimize(self)

    def nooptimize(self):
        return _mummer.Options_nooptimize(self)

    def reverse(self):
        return _mummer.Options_reverse(self)

    def simplify(self):
        return _mummer.Options_simplify(self)

    def nosimplify(self):
        return _mummer.Options_nosimplify(self)
    __swig_setmethods__["min_len"] = _mummer.Options_min_len_set
    __swig_getmethods__["min_len"] = _mummer.Options_min_len_get
    if _newclass:
        min_len = _swig_property(_mummer.Options_min_len_get, _mummer.Options_min_len_set)
    __swig_setmethods__["fixed_separation"] = _mummer.Options_fixed_separation_set
    __swig_getmethods__["fixed_separation"] = _mummer.Options_fixed_separation_get
    if _newclass:
        fixed_separation = _swig_property(_mummer.Options_fixed_separation_get, _mummer.Options_fixed_separation_set)
    __swig_setmethods__["max_separation"] = _mummer.Options_max_separation_set
    __swig_getmethods__["max_separation"] = _mummer.Options_max_separation_get
    if _newclass:
        max_separation = _swig_property(_mummer.Options_max_separation_get, _mummer.Options_max_separation_set)
    __swig_setmethods__["min_output_score"] = _mummer.Options_min_output_score_set
    __swig_getmethods__["min_output_score"] = _mummer.Options_min_output_score_get
    if _newclass:
        min_output_score = _swig_property(_mummer.Options_min_output_score_get, _mummer.Options_min_output_score_set)
    __swig_setmethods__["separation_factor"] = _mummer.Options_separation_factor_set
    __swig_getmethods__["separation_factor"] = _mummer.Options_separation_factor_get
    if _newclass:
        separation_factor = _swig_property(_mummer.Options_separation_factor_get, _mummer.Options_separation_factor_set)
    __swig_setmethods__["use_extent"] = _mummer.Options_use_extent_set
    __swig_getmethods__["use_extent"] = _mummer.Options_use_extent_get
    if _newclass:
        use_extent = _swig_property(_mummer.Options_use_extent_get, _mummer.Options_use_extent_set)
    __swig_setmethods__["do_delta"] = _mummer.Options_do_delta_set
    __swig_getmethods__["do_delta"] = _mummer.Options_do_delta_get
    if _newclass:
        do_delta = _swig_property(_mummer.Options_do_delta_get, _mummer.Options_do_delta_set)
    __swig_setmethods__["do_extend"] = _mummer.Options_do_extend_set
    __swig_getmethods__["do_extend"] = _mummer.Options_do_extend_get
    if _newclass:
        do_extend = _swig_property(_mummer.Options_do_extend_get, _mummer.Options_do_extend_set)
    __swig_setmethods__["to_seqend"] = _mummer.Options_to_seqend_set
    __swig_getmethods__["to_seqend"] = _mummer.Options_to_seqend_get
    if _newclass:
        to_seqend = _swig_property(_mummer.Options_to_seqend_get, _mummer.Options_to_seqend_set)
    __swig_setmethods__["do_shadows"] = _mummer.Options_do_shadows_set
    __swig_getmethods__["do_shadows"] = _mummer.Options_do_shadows_get
    if _newclass:
        do_shadows = _swig_property(_mummer.Options_do_shadows_get, _mummer.Options_do_shadows_set)
    __swig_setmethods__["break_len"] = _mummer.Options_break_len_set
    __swig_getmethods__["break_len"] = _mummer.Options_break_len_get
    if _newclass:
        break_len = _swig_property(_mummer.Options_break_len_get, _mummer.Options_break_len_set)
    __swig_setmethods__["banding"] = _mummer.Options_banding_set
    __swig_getmethods__["banding"] = _mummer.Options_banding_get
    if _newclass:
        banding = _swig_property(_mummer.Options_banding_get, _mummer.Options_banding_set)

    def __init__(self):
        this = _mummer.new_Options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mummer.delete_Options
    __del__ = lambda self: None
Options_swigregister = _mummer.Options_swigregister
Options_swigregister(Options)


def align_sequences(*args):
    return _mummer.align_sequences(*args)
align_sequences = _mummer.align_sequences
# This file is compatible with both classic and new-style classes.


